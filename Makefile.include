# -*- makefile -*-

ifndef CONTIKI
  ${error CONTIKI not defined! You must specify where Contiki resides}
endif

### Include a helper Makefile that creates variables for all Contiki-NG path
### locations.
include $(CONTIKI)/Makefile.dir-variables

# Enable Werror by default. To disable from command line, use make WERROR=0.
# Setting this option is also important for tests on Cooja motes to check for warnings.
WERROR ?= 1

include $(CONTIKI)/Makefile.identify-target

### Include Makefile.tools to pull in targets that allow us to build tools dir
include $(CONTIKI)/Makefile.tools

ifeq ($(DEFINES),)
  -include Makefile.$(TARGET).defines
  ifneq ($(DEFINES),)
    ${info using saved defines '$(DEFINES)'}
  endif
endif

ifndef HOST_OS
  ifeq ($(OS),Windows_NT)
  ## TODO: detect more specific Windows set-ups,
  ## e.g. CygWin, MingW, VisualC, Watcom, Interix
    HOST_OS := Windows
  else
    HOST_OS := $(shell uname)
  endif
endif

#More debug information when running in CI
ifdef CI
  ifeq ($(CI),true)
    V = 1
  endif
endif

BUILD_DIR = build
BUILD_DIR_TARGET = $(BUILD_DIR)/$(TARGET)
BUILD_DIR_TARGET_BOARD = $(BUILD_DIR_TARGET)/$(BOARD)
# If BOARD was empty, make sure we don't end up with a sequence of slashes
BUILD_DIR_FULL = $(BUILD_DIR_TARGET_BOARD:/=)/$(BUILD_DIR_CONFIG)
# Ditto if BUILD_DIR_CONFIG was empty
BUILD_DIR_BOARD = $(BUILD_DIR_FULL:/=)
OBJECTDIR = $(BUILD_DIR_BOARD)/obj
ifdef OBJVARIANT
# provide suffix to obj dir, so that we can different variantsin same target of build 
OBJECTDIR = $(BUILD_DIR_BOARD)/obj.$(OBJVARIANT)
else
OBJECTDIR = $(BUILD_DIR_BOARD)/obj
endif

CONTIKI_NG_TARGET_LIB = $(BUILD_DIR_BOARD)/contiki-ng-$(TARGET).a

LOWERCASE = -abcdefghijklmnopqrstuvwxyz/
UPPERCASE = _ABCDEFGHIJKLMNOPQRSTUVWXYZ_
TARGET_UPPERCASE := ${strip ${shell echo $(TARGET) | sed y!$(LOWERCASE)!$(UPPERCASE)!}}
CFLAGS += -DCONTIKI=1 -DCONTIKI_TARGET_$(TARGET_UPPERCASE)=1
CFLAGS += -DCONTIKI_TARGET_STRING=\"$(TARGET)\"

# try it for cleanup unused code
ifneq ("$(RELEASE)","")
CFLAGS += -ffunction-sections
CFLAGS += -fdata-sections
LDFLAGS+= -Wl,-gc-sections,--cref
# turn off asserts
CFLAGS += -DNDEBUG
endif

ifdef NDEBUG
# turn off asserts
CFLAGS += -DNDEBUG
endif

ifdef GCCTEMPS
CFLAGS += -save-temps=obj -dD
endif

LDFLAGS_WERROR ?= -Wl,--fatal-warnings
#CFLAGS_WERROR += -Wno-error=unused-const-variable
CFLAGS_WERROR += -Wno-error=unused-function -Wno-error=unused-variable



ifeq ($(WERROR),1)
 LDFLAGS += $(LDFLAGS_WERROR)
 CFLAGS += $(CFLAGS_WERROR)
endif

MODULES += $(CONTIKI_NG_OS_DIR) $(CONTIKI_NG_ARCH_DIR)
MODULES += $(CONTIKI_NG_SYS_DIR) $(CONTIKI_NG_LIB_DIR) $(CONTIKI_NG_DEV_DIR)
#provide featured v/sprintf 
MODULES += $(CONTIKI_NG_LIB_DIR)/dbg-io
MODULES += $(CONTIKI_NG_NET_DIR) $(CONTIKI_NG_ROUTING_DIR)
MODULES += $(CONTIKI_NG_MAC_DIR) $(CONTIKI_NG_MAC_DIR)/framer
MODULES += $(CONTIKI_NG_STORAGE_DIR) $(CONTIKI_NG_SERVICES_DIR)

# Automatically include project-conf.h if found
ifneq ("$(wildcard project-conf.h)","")
CFLAGS += -DPROJECT_CONF_PATH=\"project-conf.h\"
endif

define oname
${patsubst %.c,%.o, \
${patsubst %.cpp,%.o, \
${patsubst %.S,%.o, \
${patsubst %.s,%.o, \
$(1) \
}}}}
endef

uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))

### Include target makefile (TODO Unsafe?)

target_makefile := $(wildcard $(CONTIKI_NG_RELOC_PLATFORM_DIR)/$(TARGET)/Makefile.$(TARGET) \
                   $(foreach TDIR, $(TARGETDIRS), $(TDIR)/$(TARGET)/Makefile.$(TARGET)))

# Check if the target makefile exists, and create the object directory if necessary.
ifeq ($(strip $(target_makefile)),)
  ${error The target platform "$(TARGET)" does not exist (maybe it was misspelled?)}
else
  ifneq (1, ${words $(target_makefile)})
    ${error More than one TARGET Makefile found: $(target_makefile)}
  endif
  $(info target make by $(target_makefile) )
  include $(target_makefile)
endif

# Decide whether to build or to skip this target for this platform
ifneq ("", "$(PLATFORMS_ONLY)")
  ifeq ("","$(filter $(TARGET), $(PLATFORMS_ONLY))")
    PLATFORM_ACTION = skip
  endif
endif

ifneq ("", "$(PLATFORMS_EXCLUDE)")
  ifneq ("","$(filter $(TARGET), $(PLATFORMS_EXCLUDE))")
    PLATFORM_ACTION = skip
  endif
endif

ifneq ($(BOARD),)
ifneq ("", "$(BOARDS_ONLY)")
  ifeq ("","$(filter $(BOARD), $(BOARDS_ONLY))")
    PLATFORM_ACTION = skip
  endif
endif

ifneq ("", "$(BOARDS_EXCLUDE)")
  ifneq ("","$(filter $(BOARD), $(BOARDS_EXCLUDE))")
    PLATFORM_ACTION = skip
  endif
endif
endif # $(BOARD) not empty

PLATFORM_ACTION ?= build

$(BUILD_DIR):
	$(TRACE_MKDIR)
	$(Q)mkdir -p $@

# Provide path for *.map file
$(BUILD_DIR_BOARD): | $(BUILD_DIR)
	$(TRACE_MKDIR)
	$(Q)mkdir -p $@

# Provide way to create $(OBJECTDIR) if it has been removed by make clean
$(OBJECTDIR): | $(BUILD_DIR)
	$(TRACE_MKDIR)
	$(Q)mkdir -p $@

ifneq ($(BOARD),)
  TARGET_BOARD_UPPERCASE := ${strip ${shell echo $(BOARD) | sed y!$(LOWERCASE)!$(UPPERCASE)!}}
  CFLAGS += -DCONTIKI_BOARD_$(TARGET_BOARD_UPPERCASE)=1
  CFLAGS += -DCONTIKI_BOARD_STRING=\"$(BOARD)\"
endif

# Include IPv6, IPv4, and/or Rime


ifneq ($(MAKE_NET),)
  HAS_STACK = 1
else
  HAS_STACK = 0
endif

ifeq ($(CONTIKI_WITH_IPV4),1)
  HAS_STACK = 1
  MAKE_NET ?= MAKE_NET_IPV4
endif

ifeq ($(CONTIKI_WITH_RIME),1)
  HAS_STACK = 1
  MAKE_NET ?= MAKE_NET_RIME
endif

# Make IPv6 the default stack
ifeq ($(HAS_STACK),0)
ifneq ($(CONTIKI_WITH_IPV6),0)
$(info enable IPV6 by default)
CONTIKI_WITH_IPV6 ?= 1
endif
endif

ifeq ($(CONTIKI_WITH_IPV6),1)
  MAKE_NET ?= MAKE_NET_IPV6
endif

ifeq ($(CONTIKI_WITH_RPL),1)
    CFLAGS += -DUIP_CONF_IPV6_RPL=1
    MAKE_ROUTING ?= MAKE_ROUTING_RPL_LITE
else ifeq ($(CONTIKI_WITH_RPL),0)
    CFLAGS += -DUIP_CONF_IPV6_RPL=0
endif

# Configure MAC layer

# The different options
MAKE_MAC_NULLMAC = 0
MAKE_MAC_CSMA = 1
MAKE_MAC_TSCH = 2
MAKE_MAC_BLE = 3
MAKE_MAC_OTHER = 4

# Make CSMA the default MAC
MAKE_MAC ?= MAKE_MAC_CSMA

ifeq ($(MAKE_MAC),MAKE_MAC_NULLMAC)
  MODULES += $(CONTIKI_NG_MAC_DIR)/nullmac
  CFLAGS += -DMAC_CONF_WITH_NULLMAC=1
endif

ifeq ($(MAKE_MAC),MAKE_MAC_CSMA)
  MODULES += $(CONTIKI_NG_MAC_DIR)/csma
  CFLAGS += -DMAC_CONF_WITH_CSMA=1
endif

ifeq ($(MAKE_MAC),MAKE_MAC_TSCH)
  MODULES += $(CONTIKI_NG_MAC_DIR)/tsch
  CFLAGS += -DMAC_CONF_WITH_TSCH=1
endif

ifeq ($(MAKE_MAC),MAKE_MAC_BLE)
  MODULES += $(CONTIKI_NG_MAC_DIR)/ble
  CFLAGS += -DMAC_CONF_WITH_BLE=1
endif

ifeq ($(MAKE_MAC),MAKE_MAC_OTHER)
  CFLAGS += -DMAC_CONF_WITH_OTHER=1
endif

# Configure Network layer

MAKE_NET_NULLNET = 0
MAKE_NET_IPV6 = 1
MAKE_NET_OTHER = 2
MAKE_NET_IPV4 = 3
MAKE_NET_RIME = 4

# Make IPv6 the default stack
MAKE_NET ?= MAKE_NET_IPV6

ifeq ($(MAKE_NET),MAKE_NET_NULLNET)
  CFLAGS += -DNETSTACK_CONF_WITH_NULLNET=1
  MODULES += $(CONTIKI_NG_NET_DIR)/nullnet
endif

ifeq ($(MAKE_NET),MAKE_NET_IPV6)
  CFLAGS += -DNETSTACK_CONF_WITH_IPV6=1
  MODULES += $(CONTIKI_NG_NET_DIR)/ipv6 $(CONTIKI_NG_NET_DIR)/ip
endif

ifeq ($(MAKE_NET),MAKE_NET_IPV4)
  CFLAGS += -DNETSTACK_CONF_WITH_IPV4=1
  MODULES += $(CONTIKI_NG_NET_DIR)/ipv4 $(CONTIKI_NG_NET_DIR)/ip
endif

ifeq ($(MAKE_NET),MAKE_NET_RIME)
  CFLAGS += -DNETSTACK_CONF_WITH_RIME=1
  MODULES += $(CONTIKI_NG_NET_DIR)/rime
endif

ifeq ($(MAKE_NET),MAKE_NET_OTHER)
  CFLAGS += -DNETSTACK_CONF_WITH_OTHER=1
endif

ifeq ($(WITH_IP64),1)
  MODULES += $(CONTIKI_NG_SERVICES_DIR)/ip64
endif

# Configure Routing protocol
MAKE_ROUTING_NULLROUTING = 0
MAKE_ROUTING_RPL_CLASSIC = 1
MAKE_ROUTING_RPL_LITE = 2

# Default routing protocol: RPL for IPv6, None otherwise
ifeq ($(MAKE_NET),MAKE_NET_IPV6)
MAKE_ROUTING ?= MAKE_ROUTING_RPL_LITE
else
MAKE_ROUTING ?= MAKE_ROUTING_NULLROUTING
endif

ifeq ($(MAKE_ROUTING),MAKE_ROUTING_RPL_CLASSIC)
  CFLAGS += -DROUTING_CONF_RPL_CLASSIC=1
  MODULES += $(CONTIKI_NG_ROUTING_DIR)/rpl-classic
else ifeq ($(MAKE_ROUTING),MAKE_ROUTING_RPL_LITE)
  CFLAGS += -DROUTING_CONF_RPL_LITE=1
  MODULES += $(CONTIKI_NG_ROUTING_DIR)/rpl-lite
else ifeq ($(MAKE_ROUTING),MAKE_ROUTING_NULLROUTING)
  CFLAGS += -DROUTING_CONF_NULLROUTING=1
  MODULES += $(CONTIKI_NG_ROUTING_DIR)/nullrouting
endif

### Include application makefiles

ifdef APPS
  $(info apps: $(APPDS))
  APPDS = ${wildcard ${foreach DIR, $(APPDIRS), ${addprefix $(DIR)/, $(APPS)}}} \
             ${wildcard ${addprefix $(CONTIKI)/apps/, $(APPS)} \
             ${addprefix $(OBJECTDIR)/apps/, $(APPS)} \
             $(APPS)}
  APPINCLUDES = ${foreach APP, $(APPS), ${wildcard ${foreach DIR, $(APPDS), $(DIR)/Makefile.$(APP)}}}
  -include $(APPINCLUDES)
  APP_SOURCES = ${foreach APP, $(APPS), $($(APP)_src)}
  DSC_SOURCES = ${foreach APP, $(APPS), $($(APP)_dsc)}
  CONTIKI_SOURCEFILES += $(APP_SOURCES) $(DSC_SOURCES)
endif

ifdef MODULES

MODULEDIRS = $(MODULES_REL) ${addprefix $(CONTIKI)/, $(MODULES)}
UNIQUEMODULES = $(call uniq,$(MODULEDIRS))

include $(CONTIKI)/Makefile.modules_inspect

### Perform an immediate expansion of MODULES_INCLUDES and store it in a
### variable. This will allow us to subsequently filter-out module Makefiles
### that were included in the first pass, such that we don't end up including
### them twice.
MODULES_INCLUDED_FIRST_PASS := $(MODULES_INCLUDES)
include $(MODULES_INCLUDED_FIRST_PASS)
$(info modules 1st pass $(MODULES_INCLUDED_FIRST_PASS) )
include $(CONTIKI)/Makefile.modules_inspect

# Iterate once more: include the modules added from the previous include.
# Only works with one level of nested module inclusion.
MODULES_INCLUDED_SECOND_PASS := $(filter-out $(MODULES_INCLUDED_FIRST_PASS) \
                                             , $(MODULES_INCLUDES) )
include $(MODULES_INCLUDED_SECOND_PASS)
$(info modules 2nd pass  $(MODULES_INCLUDED_SECOND_PASS) )
include $(CONTIKI)/Makefile.modules_inspect

# Iterate once more: include the modules added from the previous include.
# Only works with one level of nested module inclusion.
MODULES_INCLUDED_3_PASS := $(filter-out $(MODULES_INCLUDED_FIRST_PASS) \
                                             $(MODULES_INCLUDED_SECOND_PASS) \
                                             ,$(MODULES_INCLUDES) )
include $(MODULES_INCLUDED_3_PASS)
$(info modules 3rd pass $(MODULES_INCLUDED_3_PASS) )
include $(CONTIKI)/Makefile.modules_inspect

# C-include module-specific macros using -imacros
MODULES_IMACROS = ${wildcard ${foreach d, $(UNIQUEMODULES), $(d)/module-macros.h}}
ifneq ($(MODULES_IMACROS),)
  CFLAGS += ${foreach d, $(MODULES_IMACROS), -imacros $(d)}
endif

endif

### Verbosity control. Use  make V=1  to get verbose builds.

ifeq ($(V),1)
  TRACE_CC = @echo "  CC       " $< "-->" $@
  TRACE_CCX= @echo "  C++      " $< "-->" $@
  TRACE_LD = @echo "  LD       " "-->" $@
  TRACE_AR = @echo "  AR       " "-->" $@
  TRACE_AS = @echo "  AS       " $< "-->" $@
  TRACE_OBJCOPY  = @echo "  OBJCOPY  " $< "-->" $@
  TRACE_OBJDUMP  = @echo "  OBJDUMP  " $< "-->" $@
  TRACE_MKDIR = @echo "  MKDIR    " $@
  TRACE_CP       = @echo "  CP       " $< "-->" $@
  Q=
else
  TRACE_CC = @echo "  CC       " $< "-->" $@
  TRACE_CCX= @echo "  C++      " $< "-->" $@
  TRACE_LD = @echo "  LD       " $@
  TRACE_AR = @echo "  AR       " $@
  TRACE_AS = @echo "  AS       " $< "-->" $@
  TRACE_OBJCOPY  = @echo "  OBJCOPY  " $< "-->" $@
  TRACE_OBJDUMP  = @echo "  OBJDUMP  " $< "-->" $@
  TRACE_MKDIR = @echo "  MKDIR    " $@
  TRACE_CP       = @echo "  CP       " $< "-->" $@
  Q=@
endif

### Forward comma-separated list of arbitrary defines to the compiler

COMMA := ,
CFLAGS += ${addprefix -D,${subst $(COMMA), ,$(DEFINES)}}

### Setup directory search path for source and header files

CONTIKI_TARGET_DIRS_CONCAT = ${addprefix ${dir $(target_makefile)}, \
                               $(CONTIKI_TARGET_DIRS)}
CONTIKI_CPU_DIRS_CONCAT    = ${addprefix $(CONTIKI_CPU)/, \
                               $(CONTIKI_CPU_DIRS)}

$(info terget dirs:$(CONTIKI_TARGET_DIRS) -> $(CONTIKI_TARGET_DIRS_CONCAT) )
$(info cpu dirs:$(CONTIKI_CPU_DIRS) -> $(CONTIKI_CPU_DIRS_CONCAT) )
$(info external dirs:$(EXTERNALDIRS) )

SOURCEDIRS += . $(PROJECTDIRS) $(CONTIKI_TARGET_DIRS_CONCAT) \
             $(CONTIKI_CPU_DIRS_CONCAT) $(MODULEDIRS) $(EXTERNALDIRS) $(APPDS)



vpath %.c $(SOURCEDIRS)
vpath %.cpp $(SOURCEDIRS)
vpath %.S $(SOURCEDIRS)
vpath %.s $(SOURCEDIRS)
vpath %.o $(OBJECTDIR)

CFLAGS += ${addprefix -I, $(call uniq,$(SOURCEDIRS) $(CONTIKI)) }

### Check for a git repo and pass version if found
### git.exe in Windows cmd shells may require no stderr redirection
ifndef RELSTR
RELSTR:=${shell git --git-dir ${CONTIKI}/.git --work-tree ${CONTIKI} describe \
          --tags --always --dirty}
endif

ifneq ($(RELSTR),)
CFLAGS += -DCONTIKI_VERSION_STRING=\"Contiki-NG-$(RELSTR)\"
else
CFLAGS += -DCONTIKI_VERSION_STRING=\"Contiki-NG\"
endif

CFLAGS_CPU ?=
CPPFLAGS := ${CPPFLAGS} ${CFLAGS}
CFLAGS := ${CFLAGS_CPU} ${CFLAGS}


### drop excluded objects

ifneq ("$(SOURCE_EXCLUDE)","")
CONTIKI_SOURCEFILES := $(filter-out $(SOURCE_EXCLUDE), $(CONTIKI_SOURCEFILES))
PROJECT_SOURCEFILES := $(filter-out $(SOURCE_EXCLUDE), $(PROJECT_SOURCEFILES))
endif


CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}
PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call oname, $(PROJECT_SOURCEFILES)}}

### Automatic dependency generation

ifneq ($(MAKECMDGOALS),clean)
OEXT = $(call oname, .c)
DEPS = $(CONTIKI_OBJECTFILES:${OEXT}=.d) \
       $(PROJECT_OBJECTFILES:${OEXT}=.d) \
       $(TARGET_STARTFILES:${OEXT}=.d)

#$(info deps: ${DEPS})
-include ${DEPS}
endif

# prevent delete project objects that have deps but not included in contiki lib  
.SECONDARY : $(PROJECT_OBJECTFILES) $(TARGET_STARTFILES)

### See http://make.paulandlesley.org/autodep.html#advanced

ifeq ([${WINDIR}],[])
define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:].*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef
else
###  windows pathes can contain ':' char, so just allow it
define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^.*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef
endif

### Harmonize filename of a .map file, if the platform's build system wants
### to create one
CONTIKI_NG_PROJECT_MAP = $(BUILD_DIR_BOARD)/$(basename $(notdir $@)).map

.PHONY: clean distclean usage help targets boards savetarget savedefines viewconf

clean:
	-$(Q)rm -f *.d *.e *.o $(CLEAN)
	-$(Q)rm -rf $(BUILD_DIR_TARGET)
	-$(Q)rm -f $(addsuffix .$(TARGET), $(CONTIKI_PROJECT))
	@echo Target $(TARGET) cleaned

distclean:
	@for TARG in `ls $(CONTIKI_NG_RELOC_PLATFORM_DIR) $(TARGETDIRS)`; do \
		echo Running: $(MAKE) TARGET=$$TARG clean; \
		$(MAKE) TARGET=$$TARG clean; \
	done
	-$(Q)rm -rf $(BUILD_DIR)

-include $(CONTIKI_NG_RELOC_PLATFORM_DIR)/$(TARGET)/Makefile.customrules-$(TARGET)

fdef GCCTEMPS
define DUMP_GCCCPP
$(Q)$(CC) $(CFLAGS) -E -c $< -o ${patsubst %.o,%.ip, $@}
endef
else
define DUMP_GCCCPP
endef
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_O
$(info custom object/rule to $(OBJECTDIR))
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)
	@${DUMP_GCCCPP}

$(OBJECTDIR)/%.o: %.cpp | $(OBJECTDIR)
	$(TRACE_CCX)
	$(Q)$(CCX) $(CPPFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)
	@${DUMP_GCCCPP}
endif

ifndef CUSTOM_RULE_S_TO_OBJECTDIR_O
$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -o $@ $<
	@${DUMP_GCCCPP}

$(OBJECTDIR)/%.o: %.s | $(OBJECTDIR)
	$(TRACE_AS)
	$(Q)$(AS) $(ASFLAGS) -o $@ $<
	@${DUMP_GCCCPP}
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_S
$(OBJECTDIR)/%.s: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -S $< -o $@
	@${DUMP_GCCCPP}
endif

ifndef CUSTOM_RULE_C_TO_OBJECTDIR_E
$(OBJECTDIR)/%.e: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -E $< -o $@
endif

ifndef CUSTOM_RULE_C_TO_O
%.o: %.c | $(BUILD_DIR_BOARD)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@
	@${DUMP_GCCCPP}

%.o: %.cpp | $(BUILD_DIR_BOARD)
	$(TRACE_CCX)
	$(Q)$(CCX) $(CPPFLAGS) -c $< -o $@
	@${DUMP_GCCCPP}
endif

ifndef CUSTOM_RULE_C_TO_S
%.s: %.c | $(BUILD_DIR_BOARD)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -S $< -o $@
endif

ifndef CUSTOM_RULE_C_TO_E
%.e: %.c | $(BUILD_DIR_BOARD)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -E $< -o $@

$(BUILD_DIR)/%.co: %.cpp | $(BUILD_DIR) $(BUILD_DIR_BOARD)
	$(TRACE_CCX)
	$(Q)$(CCX) $(CPPFLAGS) -DAUTOSTART_ENABLE -c $< -o $@
endif

ifndef AROPTS
  AROPTS = rcf
endif

ifndef CUSTOM_RULE_ALLOBJS_TO_TARGETLIB
$(CONTIKI_NG_TARGET_LIB): $(CONTIKI_OBJECTFILES) | $(BUILD_DIR_BOARD)
	$(TRACE_AR)
	$(Q)$(AR) $(AROPTS) $@ $^
endif

ifndef LD
  LD = $(CC)
endif

ifndef CUSTOM_RULE_LINK

.SECONDEXPANSION:
$(BUILD_DIR_BOARD)/%.$(TARGET): $(OBJECTDIR)/%.o $$(PROJECT_OBJECTFILES) $$(PROJECT_LIBRARIES) $(CONTIKI_NG_TARGET_LIB)
	$(TRACE_LD)
	$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(TARGET_LIBFILES) -o $@

ifeq ($(V),1)
$(info contiki:$(CONTIKI_SOURCEFILES))
$(info proj:$(PROJECT_SOURCEFILES))
$(info obj:$(PROJECT_OBJECTFILES))
endif

# this objects need for debuger, and need for quick rebuild
.PRECIOUS: $(OBJECTDIR)/%.o $(PROJECT_OBJECTFILES) 

endif

%.$(TARGET): $(BUILD_DIR_BOARD)/%.$(TARGET)
	$(TRACE_CP)
	$(Q)cp $< $@

%.ramprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [abdrw] " | cut -d' ' -f2,4

%.flashprof: %.$(TARGET)
	$(NM) -S -td --size-sort $< | grep -i " [t] " | cut -d' ' -f2,4

include $(CONTIKI)/Makefile.help

targets:
	@ls $(CONTIKI_NG_RELOC_PLATFORM_DIR) $(TARGETDIRS)

boards:
ifdef BOARD
	@echo "$(BOARDS) (current: $(BOARD))"
else
	@echo "Platform has no boards"
endif

savetarget:
	-@rm -f Makefile.target
	@echo "saving Makefile.target"
	@echo >Makefile.target "TARGET = $(TARGET)"
ifneq ($(BOARD),)
	@echo >>Makefile.target "BOARD = $(BOARD)"
endif

savedefines:
	-@rm -f Makefile.$(TARGET).defines
	@echo "saving Makefile.$(TARGET).defines"
	@echo >Makefile.$(TARGET).defines "DEFINES = $(DEFINES)"

VIEWCONF = $(CONTIKI_NG_TOOLS_DIR)/viewconf/viewconf.c
viewconf:
	@echo "----------------- Make variables: --------------"
	@echo "##### \"TARGET\": ________________________________ $(TARGET)"
	@echo "##### \"BOARD\": _________________________________ $(BOARD)"
	@echo "##### \"MAKE_MAC\": ______________________________ $(MAKE_MAC)"
	@echo "##### \"MAKE_NET\": ______________________________ $(MAKE_NET)"
	@echo "##### \"MAKE_ROUTING\": __________________________ $(MAKE_ROUTING)"
ifdef MAKE_COAP_DTLS_KEYSTORE
	@echo "##### \"MAKE_COAP_DTLS_KEYSTORE\": _______________ $(MAKE_COAP_DTLS_KEYSTORE)"
endif
	@echo "----------------- C variables: -----------------"
	$(Q)$(CC) $(CFLAGS) -E $(VIEWCONF) | grep \#\#\#\#\#
	@echo "------------------------------------------------"
	@echo "'==' Means the flag is set to a given a value"
	@echo "'->' Means the flag is unset, but will default to a given value"
	@echo "'><' Means the flag is unset and has no default value"
	@echo "To view more Make variables, edit $(CONTIKI)/Makefile.include, rule 'viewconf'"
	@echo "To view more C variables, edit $(VIEWCONF)"

### Include Makefile.embedded for relevant platforms, in order to pull in
### rules for login, serialview etc
ifeq ($(findstring $(TARGET),native cooja),)
  include $(CONTIKI)/Makefile.embedded
endif

### Include Makefile.gcc for GCC specific definitions and actions
include $(CONTIKI)/Makefile.gcc

# Don't treat $(BUILD_DIR_BOARD)/%.$(TARGET) and $(TARGET) as intermediate
# files because for many platforms they are in fact the primary target.
.PRECIOUS: $(BUILD_DIR_BOARD)/%.$(TARGET) %.$(TARGET)

# Cancel the predefined implict rule for compiling and linking
# a single C source into a binary to force GNU make to consider
# the match-anything rule below instead.
%: %.c

%: %.cpp

ifeq ($(PLATFORM_ACTION),skip)
# Skip this target.
$(CONTIKI_PROJECT):
	@echo "Skipping $@: not for the '$(TARGET)/$(BOARD)' platform!"
%.$(TARGET):
	@echo "Skipping $@: not for the '$(TARGET)/$(BOARD)' platform!"
else
# Build this target.
# Match-anything pattern rule to allow the project makefiles to
# abstract from the actual binary name. It needs to contain some
# command in order to be a rule, not just a prerequisite.
%: %.$(TARGET)
	@echo "prepared for $@ prerequesites $(BUILD_DIR)/%.$(TARGET) "
endif
